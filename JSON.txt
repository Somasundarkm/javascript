The ‘For’ Loop

The For Loop comes first because of its simplicity and ease of use. It is a very user-friendly kind of loop that runs with a method of using a counter. 

The value is first set with an appropriate condition, which is also called ‘initializing a loop’. Next, the terminal or final value is specified. The For Loop makes things really easy when you need to run a set of codes multiple times.

The For Loop is further divided into:‍

1. Using an array
The following piece of code is a perfect example of how to use a for loop through an array. 

{% code-block language="js" %}
var numbers = [ 10, 20, 30, 40, 50] 
for (var i=0; i < numbers.length; i++) {
   console.log(numbers[i])
}
‍{% code-block-end %}
Here, I have used all the numbers in the form of an array, then printed each of them in a console window. In the same way, you can make a loop through an array of strings.

2. Making a loop through DOM elements
The For loop can also be used to alter colors. Consider a situation where you want to choose a particular color for all the anchors of your page. In order to do so, use the following piece of code.
 {% code-block language="js" %}
var elements = document.querySelectorAll("a");
for (var i=0; i<elements.length; i++) {
   elements[i].style.color = "red";
}
‍{% code-block-end %}

When you look at the above code, things might not seem very clear. 

I first used `document.querySelectorAll("a")` to get all of my anchors in the array format. Once that was done, the next step looped all the array and changed its color. 

Here, we used the color red, but you may choose any color in the code and the anchors of your page will appear that particular color. 


The ‘For In’ Loop

Another way of looping is the For In Loop. Unlike the For Loop, this loop won’t be using a counter. So this makes the whole process even more simple and hassle-free. In fact, the For In Loop is essentially a simplified version of the For Loop.

The following are different ways of looping using the For In technique.

1. Looping through an Object Property
Here’s an example; you’ve got an object containing some properties and you need to look up each property and the value that it carries. Here’s how you would use the For In Loop to do so:
{% code-block language="js" %}
var person = {
   fname: "Nick",
   lname: "Jonas",
   age: 26
}; 
for (let x in person) {
   console.log(x + ": "+ person[x])
}
‍{% code-block-end %}


Types of Loops and Their Uses


Now let’s have a look at different types of Loops and their uses. We shall discuss the “While” Loop, the “Do While Loop” and the “The ForEach() Loop”.‍

1. The “While” Loop
A While Loop also doesn’t have a counter and only runs if the specified condition is true.  Here’s an example demonstrating the while loop where the loop runs till infinity:

{% code-block language="js" %}
var infiniteValue = true;
while (infiniteValue) {
   console.log("Infinite")
}
‍{% code-block-end %}

2. Do While Loop
In this loop, there’s a defined condition that needs to be checked at the end of the process.

Here’s how you can use the Do While Loop in order to loop through XML(Extensible Markup Language):







 The ForEach() Loop



This method is used for looping through an array element. Here’s an example of this:

{% code-block language="js" %}
var names = ["jerry", "tom", "pluto", "micky", "mini"];
names.forEach(function1);
function function1(currentValue, index) {
   console.log("Index in array is: "+index + " ::  Value is: "+currentValue);
}
‍{% code-block-end %}

Looping through JSON in more detail with examples
Example 1:
We're making a list of books and we enter the title as “Lord of the Rings” and the year as “1994“and the count of pages as “3000”. Similarly, a large number of objects can be created and once it’s done, we will have a large database:

{% code-block language="js" %}
var books = [
   {
       title: "Lord of the Rings",
       year: 1994,
       pages: 3000
   },
   {
       title: "1984",
       year: 1984,
       pages: 2000
   },
   {
       title: "Art of war",
       year: 2000,
       pages: 5000
   }
]
‍{% code-block-end %}
Now different things can be done with this database.

For example;

{% code-block language="js" %}
alert(books.length);
‍{% code-block-end %}
When we run this, the browser will display three. Essentially, with this, we checked that there are three objects in this array.

Keep in mind that in JSON, you need to separate your objects with a comma as you can see in the example.
Example 2
In this example, we are looping within the array.

{% code-block language="js" %}
for (i=0; i<books.length; i++){
   document.write(
       books.title + "<br />"
   );
}
‍{% code-block-end %}

Once, I run this, all of the titles in my database would be displayed as shown below.



